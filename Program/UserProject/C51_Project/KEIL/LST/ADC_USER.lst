C51 COMPILER V9.60.0.0   ADC_USER                                                          10/31/2022 08:45:42 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE ADC_USER
OBJECT MODULE PLACED IN .\Output\ADC_USER.obj
COMPILER INVOKED BY: d:\Keil_v5\C51\BIN\C51.EXE ..\..\..\UserCode\User\src\ADC_USER.c LARGE OPTIMIZE(7,SPEED) BROWSE INC
                    -DIR(..\..\..\UserCode\Device\Include;..\..\..\UserCode\StdDriver\inc;..\..\..\UserCode\User\ins;..\..\..\UserCode\StdDri
                    -ver\src;..\..\..\UserCode\StdDriver\lib) DEBUG OBJECTEXTEND PRINT(.\LST\ADC_USER.lst) TABS(2) OBJECT(.\Output\ADC_USER.o
                    -bj)

line level    source

   1          #include "ML51.h"
   2          /*NTC²é±íÊý¾Ý*/
   3          const unsigned int  NTC_ADCValue[81]={
   4                                               3950,3890,3829,3766,3703,3638,3572,3506,3439,3371,
   5                                               3302,3233,3164,3094,3024,2954,2884,2814,2745,2676,
   6                                               2607,2539,2471,2403,2337,2272,2207,2144,2081,2019,
   7                                               1959,1899,1841,1784,1728,1674,1620,1569,1518,1469,
   8                                               1421,1374,1328,1284,1241,1200,1159,1120,1082,1046,
   9                                               1010, 976, 941, 910, 879, 848, 820, 791, 764, 737,
  10                                                712, 687, 664, 641, 619, 599, 578, 558, 539, 521,
  11                                                503, 486, 470, 454, 438, 424, 410, 396, 383, 370,
  12                                                357 
  13                                              } ;
  14          
  15          typedef struct NTC_Data_s
  16          {
  17            uint16_t Min_NTC_Val;          //NTC×î´óÖµ
  18            uint16_t Max_NTC_Val;          //NTC×îÐ¡Öµ
  19            uint16_t NTC_Val_Sum;          //NTC16´ÎµÄ²ÉÑùºÍ
  20            uint16_t NTC_Val;              //NTCÂË²¨ºóµÄÖµ
  21            uint16_t NTC_Val_Last;         //NTCÉÏÒ»´ÎµÄ²ÉÑùÖµ
  22            uint16_t Adval_Ntc[18];        //NTC²ÉÑùºó´æ´¢Êý×é
  23            uint8_t  Adval_Ntc_Idx;        //NTCÊý×éÏÂ±ê
  24            uint16_t NTC_Temp;             //NTCÎÂ¶ÈÖµ
  25            uint16_t NTC_Init;             //NTC³õÊ¼Öµ
  26            uint8_t NTC_Temp_i;
  27            uint8_t IsFistGetTemp;
  28          }NTC_Data_s;
  29          
  30          typedef struct Bat_Data_s
  31          {
  32            uint16_t Min_Bat_Val;          //Bat×î´óÖµ
  33            uint16_t Max_Bat_Val;          //Bat×îÐ¡Öµ
  34            uint32_t Bat_Val_Sum;          //Bat16´ÎµÄ²ÉÑùºÍ
  35            uint16_t Bat_Val;              //BatÂË²¨ºóµÄÖµ
  36            uint16_t Bat_Val_Last;         //BatÉÏÒ»´ÎµÄ²ÉÑùÖµ
  37            uint16_t Adval_Bat[18];        //Bat²ÉÑùºó´æ´¢Êý×é
  38            uint8_t  Adval_Bat_Idx;        //BatÊý×éÏÂ±ê
  39            uint32_t Bat_Voltage;          //BatµçÑ¹Öµ
  40            uint8_t  IsNeedCheckBatvolt;   //ÊÇ·ñÐèÒª¼ì²âµç³ØµçÑ¹
  41            BatMod_s BatMod;               //µç³ØÄ£Ê½
  42            uint8_t  BatPowerPecent;       //µçÁ¿°Ù·Ö±È
  43            //uint16_t NTC_Init;             Bat³õÊ¼Öµ
  44            //uint8_t NTC_Temp_i;
  45            //uint8_t IsFistGetTemp;
  46          }Bat_Data_s;
  47          
  48          typedef struct ADC_Data_s
  49          {
  50          NTC_Data_s NTC_Data;
  51          Bat_Data_s Bat_Data;  
  52          uint8_t Is_Bat_ChargFull;
C51 COMPILER V9.60.0.0   ADC_USER                                                          10/31/2022 08:45:42 PAGE 2   

  53          }ADC_Data_s;
  54          
  55          ADC_Data_s ADC_Data;
  56          #define JBE ADC_Data
  57            
  58          void ADC_Init(void)
  59          {
  60   1      ENABLE_ADC_CH4; 
  61   1      ADC_Open(ADC_SINGLE,ADC_CHANNEL_4 );     //µ¥´Î×ª»»¡£Í¨µÀ4Í¨µÀ¡£
  62   1      ADC_SamplingTime(3,7);                   //ÉèÖÃ²ÉÑùÊ±¼ä
  63   1      ADC_Vref_Set(Enable,Enable,Level_2_560V);//ÉèÖÃÄÚ²¿²ÉÑù»ù×¼µçÑ¹
  64   1      clr_ADCCON0_ADCF;                        //×ª»»Íê³É±êÖ¾Î»ÇåÁã
  65   1      GPIO_SetMode(BatVoltCheck_PORT ,BatVoltCheck_PIN,GPIO_MODE_PUSHPULL); 
  66   1      P24_QUASI_MODE;                          //P2.4ÉèÖÃÎª×¼Ë«ÏòÄ£Ê½£¬¼ì²âÊÇ·ñÓÐ³äµç
  67   1      //ENABLE_P63_PULLUP;
  68   1      BatVoltCheck_ON;
  69   1      JBE.NTC_Data.IsFistGetTemp=True;  
  70   1      JBE.Bat_Data.IsNeedCheckBatvolt=False;
  71   1      }
  72          
  73          uint32_t Get_NtcValu(void)
  74          {  
  75   1          uint32_t ADCdataAIN;
  76   1          uint32_t Ntc_valu;
  77   1          clr_ADCCON0_ADCF;
  78   1          set_ADCCON0_ADCS;                  // ADC start trig signal
  79   1          while(!(ADCCON0&SET_BIT7));
  80   1          ADCdataAIN = (ADCRH<<4)|ADCRL;
  81   1          JBE.NTC_Data.Adval_Ntc[JBE.NTC_Data.Adval_Ntc_Idx]= ADCdataAIN;
  82   1          JBE.NTC_Data.Adval_Ntc_Idx++;
  83   1          Ntc_valu=ADCdataAIN;
  84   1          clr_ADCCON0_ADCF;
  85   1          clr_ADCCON0_ADCS;
  86   1          return Ntc_valu;
  87   1      }
  88          
  89          void ADC_RUN(uint8_t Channel)
  90          {
  91   1          uint32_t ADCdataAIN;
  92   1          if(Channel==Channel_Temp)
  93   1          {
  94   2          ENABLE_ADC_CH4; 
  95   2          clr_ADCCON0_ADCF;
  96   2          set_ADCCON0_ADCS;                  // ADC start trig signal
  97   2          while(!(ADCCON0&SET_BIT7));
  98   2          ADCdataAIN = (ADCRH<<4)|ADCRL;
  99   2          JBE.NTC_Data.Adval_Ntc[JBE.NTC_Data.Adval_Ntc_Idx]= ADCdataAIN;
 100   2          JBE.NTC_Data.Adval_Ntc_Idx++;
 101   2          clr_ADCCON0_ADCF;
 102   2          clr_ADCCON0_ADCS;
 103   2          }
 104   1          else if(Channel==Channel_BatVolt)
 105   1          {
 106   2          ENABLE_ADC_CH0; 
 107   2          clr_ADCCON0_ADCF;
 108   2          set_ADCCON0_ADCS;                  // ADC start trig signal
 109   2          while(!(ADCCON0&SET_BIT7));
 110   2          ADCdataAIN = (ADCRH<<4)|ADCRL;
 111   2          JBE.Bat_Data.Adval_Bat[JBE.Bat_Data.Adval_Bat_Idx]= ADCdataAIN;
 112   2          JBE.Bat_Data.Adval_Bat_Idx++;
 113   2          clr_ADCCON0_ADCF;
 114   2          clr_ADCCON0_ADCS;
C51 COMPILER V9.60.0.0   ADC_USER                                                          10/31/2022 08:45:42 PAGE 3   

 115   2          }
 116   1          
 117   1      }
 118          
 119          void Get_Temp_Bat(uint8_t Channel)
 120          {
 121   1         uint8_t i;
 122   1         switch (Channel)
 123   1         {
 124   2           case Channel_Temp:
 125   2           {
 126   3             ADC_RUN(Channel_Temp);
 127   3             if(JBE.NTC_Data.Adval_Ntc_Idx>=18)
 128   3             {
 129   4             JBE.NTC_Data.Adval_Ntc_Idx=0;
 130   4             JBE.NTC_Data.Min_NTC_Val=JBE.NTC_Data.Adval_Ntc[0]; //¸ø×î´ó×îÐ¡Öµ¸³³õÖµ
 131   4             JBE.NTC_Data.Max_NTC_Val=JBE.NTC_Data.Adval_Ntc[0]; 
 132   4             JBE.NTC_Data.NTC_Val_Sum=0;                //¸øÇóºÍ±äÁ¿ÇåÁã
 133   4             for(i= 1;i<18;i++)              //ÕÒ³ö×î´ó×îÐ¡Öµ
 134   4             {
 135   5              if(JBE.NTC_Data.Max_NTC_Val<JBE.NTC_Data.Adval_Ntc[i])
 136   5                 JBE.NTC_Data.Max_NTC_Val=JBE.NTC_Data.Adval_Ntc[i];
 137   5              if(JBE.NTC_Data.Min_NTC_Val>JBE.NTC_Data.Adval_Ntc[i])
 138   5                 JBE.NTC_Data.Min_NTC_Val=JBE.NTC_Data.Adval_Ntc[i];        
 139   5             }
 140   4              for(i= 0;i< 18;i++)     //ÇóºÍ
 141   4              {
 142   5                JBE.NTC_Data.NTC_Val_Sum+=JBE.NTC_Data.Adval_Ntc[i];    
 143   5              }
 144   4              JBE.NTC_Data.NTC_Val_Sum =JBE.NTC_Data.NTC_Val_Sum -JBE.NTC_Data.Min_NTC_Val -JBE.NTC_Data.Max_NTC_Val
             -;            //¼õÈ¥×î´ó×îÐ¡Öµ
 145   4              JBE.NTC_Data.NTC_Val_Sum>>= 4;                                                          //²ÉÑùÖµÒÑÉáÈ¥×îµÍÁ
             -½Î»£¬ÕâÀï³ýÒÔ4
 146   4              JBE.NTC_Data.NTC_Val=JBE.NTC_Data.NTC_Val_Sum;
 147   4              JBE.NTC_Data.NTC_Val=0.9*JBE.NTC_Data.NTC_Val_Sum+0.1*JBE.NTC_Data.NTC_Val_Last;
 148   4              JBE.NTC_Data.NTC_Val_Last=JBE.NTC_Data.NTC_Val; 
 149   4              for(i=0;i<80;i++)                                                            //²é±íÈ·¶¨ÎÂ¶È
 150   4              {
 151   5              if((JBE.NTC_Data.NTC_Val<=NTC_ADCValue[i])&&(JBE.NTC_Data.NTC_Val>NTC_ADCValue[i+1]))           //µÃµ½
             -ÎÂ¶È·¶Î§
 152   5              {
 153   6               if(i<20)                                                                     //ÊÇ¸ºÎÂ¶È
 154   6               {
 155   7                JBE.NTC_Data.NTC_Temp=(19-i)*10+10*(NTC_ADCValue[i]-JBE.NTC_Data.NTC_Val)/(NTC_ADCValue[i]-NTC_ADCVal
             -ue[i+1]);
 156   7                
 157   7               }
 158   6               else                                                                         //ÊÇÕýÎÂ¶È
 159   6               {
 160   7               JBE.NTC_Data.NTC_Temp=(i-20)*10+(10*(NTC_ADCValue[i]-JBE.NTC_Data.NTC_Val))/(NTC_ADCValue[i]-NTC_ADCV
             -alue[i+1]);
 161   7               JBE.NTC_Data.NTC_Temp_i=i;
 162   7               JBE.NTC_Data.NTC_Temp_i=i;
 163   7               return; 
 164   7               }
 165   6              }
 166   5             } 
 167   4           }
 168   3           break;
 169   3           }
 170   2           case  Channel_BatVolt:
 171   2           {   
C51 COMPILER V9.60.0.0   ADC_USER                                                          10/31/2022 08:45:42 PAGE 4   

 172   3               uint8_t i;
 173   3              ADC_RUN(Channel_BatVolt);
 174   3             if(JBE.Bat_Data.Adval_Bat_Idx>=18)
 175   3             {
 176   4             JBE.Bat_Data.Adval_Bat_Idx=0;
 177   4             JBE.Bat_Data.Min_Bat_Val=JBE.Bat_Data.Adval_Bat[0]; //¸ø×î´ó×îÐ¡Öµ¸³³õÖµ
 178   4             JBE.Bat_Data.Max_Bat_Val=JBE.Bat_Data.Adval_Bat[0]; 
 179   4             JBE.Bat_Data.Bat_Val_Sum=0;                //¸øÇóºÍ±äÁ¿ÇåÁã
 180   4             for(i= 1;i<18;i++)              //ÕÒ³ö×î´ó×îÐ¡Öµ
 181   4             {
 182   5              if(JBE.Bat_Data.Max_Bat_Val<JBE.Bat_Data.Adval_Bat[i])
 183   5                 JBE.Bat_Data.Max_Bat_Val=JBE.Bat_Data.Adval_Bat[i];
 184   5              if(JBE.Bat_Data.Min_Bat_Val>JBE.Bat_Data.Adval_Bat[i])
 185   5                 JBE.Bat_Data.Min_Bat_Val=JBE.Bat_Data.Adval_Bat[i];        
 186   5             }
 187   4              for(i= 0;i< 18;i++)     //ÇóºÍ
 188   4              {
 189   5                JBE.Bat_Data.Bat_Val_Sum+=JBE.Bat_Data.Adval_Bat[i];    
 190   5              }
 191   4              JBE.Bat_Data.Bat_Val_Sum =JBE.Bat_Data.Bat_Val_Sum -JBE.Bat_Data.Min_Bat_Val -JBE.Bat_Data.Max_Bat_Val
             -;            //¼õÈ¥×î´ó×îÐ¡Öµ
 192   4              JBE.Bat_Data.Bat_Val_Sum>>= 4;                                                                             
             -       //²ÉÑùÖµÒÑÉáÈ¥×îµÍÁ½Î»£¬ÕâÀï³ýÒÔ4
 193   4              //JBE.Bat_Data.Bat_Val=JBE.Bat_Data.Bat_Val_Sum;
 194   4              JBE.Bat_Data.Bat_Val_Sum=0.9*JBE.Bat_Data.Bat_Val_Sum+0.1*JBE.Bat_Data.Bat_Val_Last;
 195   4              JBE.Bat_Data.Bat_Val_Last=JBE.Bat_Data.Bat_Val_Sum; 
 196   4              JBE.Bat_Data.Bat_Val=JBE.Bat_Data.Bat_Val_Sum*256*20/4095;
 197   4              
 198   4              
 199   4           }
 200   3           break;
 201   3           
 202   3           
 203   3           }
 204   2         
 205   2         
 206   2         }
 207   1      
 208   1        
 209   1      
 210   1      }
 211          
 212          void Bat_PowerDisplay(void)
 213          {  
 214   1         static uint16_t lowpowertime=0;
 215   1        if(IsChargOn==True)          //Èç¹ûÕýÔÚ³äµç
 216   1        {
 217   2         LCD_SetOnePixel(1, 22, Enable);  //ÏÔÊ¾³äµçÍ¼±ê
 218   2         LCD_SetOnePixel(3, 23, Enable);
 219   2         if(JBE.Bat_Data.Bat_Val>4100)   //µçÑ¹´óÓÚ4v±íÊ¾³äÂúÁË
 220   2         {
 221   3          JBE.Is_Bat_ChargFull=True;
 222   3          LCD_SetOnePixel(0, 22, Enable); 
 223   3          LCD_SetOnePixel(0, 23, Enable);
 224   3          LCD_SetOnePixel(1, 23, Enable);
 225   3          LCD_SetOnePixel(2, 23, Enable); 
 226   3         
 227   3         }
 228   2         /*Á½ÖÖÇé¿ö1.Ã»ÓÐ³äÂúµÄÇé¿öÏÂÐ¡ÓÚ4.1v£¬ÏÔÊ¾ÔÚ³äµç.2.ÒÑ¾­³äÂúÒ»´ÎµÄÇé¿öÏÂÈç¹ûµçÁ¿µôµ½3.9vºóÔÙ´ÎÏÔÊ¾³äµç*/
 229   2         else if((JBE.Bat_Data.Bat_Val<4100&&JBE.Is_Bat_ChargFull==False)&&(JBE.Bat_Data.Bat_Val<3900&&JBE.Is_Bat
             -_ChargFull==True))
 230   2         {
C51 COMPILER V9.60.0.0   ADC_USER                                                          10/31/2022 08:45:42 PAGE 5   

 231   3         lowpowertime++;
 232   3         if(lowpowertime==1)
 233   3         {
 234   4          LCD_SetOnePixel(0, 22, Enable);
 235   4          LCD_SetOnePixel(0, 23, Enable);
 236   4          LCD_SetOnePixel(2, 23, Disable);
 237   4          LCD_SetOnePixel(1, 23, Disable); 
 238   4         }
 239   3         else if(lowpowertime==2)
 240   3         {
 241   4          LCD_SetOnePixel(0, 22, Enable); 
 242   4          LCD_SetOnePixel(0, 23, Enable);
 243   4          LCD_SetOnePixel(1, 23, Enable);
 244   4          LCD_SetOnePixel(2, 23, Disable);
 245   4         }
 246   3         else if(lowpowertime==3)
 247   3         {
 248   4          LCD_SetOnePixel(0, 22, Enable); 
 249   4          LCD_SetOnePixel(0, 23, Enable);
 250   4          LCD_SetOnePixel(1, 23, Enable);
 251   4          LCD_SetOnePixel(2, 23, Enable); 
 252   4         }
 253   3         else 
 254   3         {
 255   4          LCD_SetOnePixel(0, 22, Enable);
 256   4          LCD_SetOnePixel(2, 23, Disable);
 257   4          LCD_SetOnePixel(1, 23, Disable);
 258   4          LCD_SetOnePixel(0, 23, Disable); 
 259   4          lowpowertime=0;
 260   4         }
 261   3        }  
 262   2        if(JBE.Bat_Data.Bat_Val<3681)   
 263   2        {
 264   3         JBE.Bat_Data.BatPowerPecent=0;
 265   3        }
 266   2        else if(JBE.Bat_Data.Bat_Val<3743)
 267   2        {
 268   3        JBE.Bat_Data.BatPowerPecent=20;
 269   3        }
 270   2        else if(JBE.Bat_Data.Bat_Val<3824)
 271   2        {
 272   3        JBE.Bat_Data.BatPowerPecent=40;
 273   3        }
 274   2        else if(JBE.Bat_Data.Bat_Val<3981)
 275   2        {
 276   3        JBE.Bat_Data.BatPowerPecent=60;
 277   3        }
 278   2        else if(JBE.Bat_Data.Bat_Val<4150)
 279   2        {
 280   3        JBE.Bat_Data.BatPowerPecent=80;
 281   3        }
 282   2        else
 283   2        {
 284   3        JBE.Bat_Data.BatPowerPecent=100;
 285   3        }  
 286   2        }
 287   1        else if(IsChargOn==False)    //Èç¹ûÕýÔÚ·Åµç
 288   1        {
 289   2         static uint8_t Pecent80Flag=0;
 290   2         static uint8_t Pecent60Flag=0;
 291   2         static uint8_t Pecent40Flag=0;
 292   2         static uint8_t Pecent20Flag=0;
C51 COMPILER V9.60.0.0   ADC_USER                                                          10/31/2022 08:45:42 PAGE 6   

 293   2         static uint8_t Pecent0Flag=0;
 294   2         JBE.Is_Bat_ChargFull=False;   //³äµçÆ÷°Îµô³äÂú±êÖ¾Î»ÇåÁã
 295   2         LCD_SetOnePixel(1, 22, Disable);  //¹Ø±Õ³äµçÍ¼±ê
 296   2          
 297   2          
 298   2         if(JBE.Bat_Data.Bat_Val>3900)
 299   2         {
 300   3          if(Pecent80Flag==0)
 301   3          {
 302   4          JBE.Bat_Data.BatPowerPecent=100;
 303   4          LCD_SetOnePixel(0, 22, Enable);
 304   4          LCD_SetOnePixel(2, 23, Enable);
 305   4          LCD_SetOnePixel(3, 23, Enable);
 306   4          LCD_SetOnePixel(1, 23, Enable);
 307   4          LCD_SetOnePixel(0, 23, Enable);
 308   4          }
 309   3          else if(Pecent80Flag==1&&JBE.Bat_Data.Bat_Val>3920)
 310   3          {
 311   4          JBE.Bat_Data.BatPowerPecent=100;
 312   4          LCD_SetOnePixel(0, 22, Enable);
 313   4          LCD_SetOnePixel(2, 23, Enable);
 314   4          LCD_SetOnePixel(3, 23, Enable);
 315   4          LCD_SetOnePixel(1, 23, Enable);
 316   4          LCD_SetOnePixel(0, 23, Enable);
 317   4          Pecent80Flag=0;
 318   4          Pecent60Flag=0;
 319   4          Pecent40Flag=0;
 320   4          Pecent20Flag=0;
 321   4          Pecent0Flag=0;  
 322   4          }
 323   3          else
 324   3          {
 325   4          JBE.Bat_Data.BatPowerPecent=80;
 326   4          LCD_SetOnePixel(0, 22, Enable);
 327   4          LCD_SetOnePixel(2, 23, Disable);
 328   4          LCD_SetOnePixel(3, 23, Enable);
 329   4          LCD_SetOnePixel(1, 23, Enable);
 330   4          LCD_SetOnePixel(0, 23, Enable);   
 331   4          }
 332   3        
 333   3         }
 334   2         else if(JBE.Bat_Data.Bat_Val>3705)
 335   2         {
 336   3           Pecent80Flag=1;
 337   3         if(Pecent60Flag==0)
 338   3           {
 339   4           JBE.Bat_Data.BatPowerPecent=80;
 340   4           LCD_SetOnePixel(0, 22, Enable);
 341   4           LCD_SetOnePixel(2, 23, Disable);
 342   4           LCD_SetOnePixel(3, 23, Enable);
 343   4           LCD_SetOnePixel(1, 23, Enable);
 344   4           LCD_SetOnePixel(0, 23, Enable);   
 345   4           }
 346   3         else if(Pecent60Flag==1&&JBE.Bat_Data.Bat_Val>3725)
 347   3           {
 348   4           JBE.Bat_Data.BatPowerPecent=80;
 349   4           LCD_SetOnePixel(0, 22, Enable);
 350   4           LCD_SetOnePixel(2, 23, Disable);
 351   4           LCD_SetOnePixel(3, 23, Enable);
 352   4           LCD_SetOnePixel(1, 23, Enable);
 353   4           LCD_SetOnePixel(0, 23, Enable);
 354   4           //Pecent80Flag=0;
C51 COMPILER V9.60.0.0   ADC_USER                                                          10/31/2022 08:45:42 PAGE 7   

 355   4           Pecent60Flag=0;
 356   4           Pecent40Flag=0;
 357   4           Pecent20Flag=0;
 358   4           Pecent0Flag=0; 
 359   4           }
 360   3         else
 361   3           {
 362   4           JBE.Bat_Data.BatPowerPecent=60;
 363   4           LCD_SetOnePixel(0, 22, Enable);
 364   4           LCD_SetOnePixel(2, 23, Disable);
 365   4           LCD_SetOnePixel(3, 23, Enable);
 366   4           LCD_SetOnePixel(1, 23, Disable);
 367   4           LCD_SetOnePixel(0, 23, Enable);  
 368   4           }
 369   3      
 370   3         }
 371   2         else if(JBE.Bat_Data.Bat_Val>3600)
 372   2         {
 373   3          Pecent60Flag=1; 
 374   3          if(Pecent40Flag==0) 
 375   3          {
 376   4           JBE.Bat_Data.BatPowerPecent=60;
 377   4           LCD_SetOnePixel(0, 22, Enable);
 378   4           LCD_SetOnePixel(2, 23, Disable);
 379   4           LCD_SetOnePixel(3, 23, Enable);
 380   4           LCD_SetOnePixel(1, 23, Disable);
 381   4           LCD_SetOnePixel(0, 23, Enable);    
 382   4          }
 383   3          else if(Pecent40Flag==1&&JBE.Bat_Data.Bat_Val>3610)
 384   3          {
 385   4           JBE.Bat_Data.BatPowerPecent=60;
 386   4           LCD_SetOnePixel(0, 22, Enable);
 387   4           LCD_SetOnePixel(2, 23, Disable);
 388   4           LCD_SetOnePixel(3, 23, Enable);
 389   4           LCD_SetOnePixel(1, 23, Disable);
 390   4           LCD_SetOnePixel(0, 23, Enable);
 391   4           Pecent40Flag=0;
 392   4           Pecent20Flag=0;
 393   4           Pecent0Flag=0; 
 394   4          }
 395   3          else
 396   3          {
 397   4          JBE.Bat_Data.BatPowerPecent=40;
 398   4          LCD_SetOnePixel(0, 22, Enable);
 399   4          LCD_SetOnePixel(2, 23, Disable);
 400   4          LCD_SetOnePixel(3, 23, Enable);
 401   4          LCD_SetOnePixel(1, 23, Disable);
 402   4          LCD_SetOnePixel(0, 23, Disable);  
 403   4          }
 404   3       
 405   3         }
 406   2         else if(JBE.Bat_Data.Bat_Val>3528)
 407   2         {
 408   3         Pecent40Flag=1; 
 409   3         if(Pecent20Flag==0)
 410   3         {
 411   4           JBE.Bat_Data.BatPowerPecent=40;
 412   4           LCD_SetOnePixel(0, 22, Enable);
 413   4           LCD_SetOnePixel(2, 23, Disable);
 414   4           LCD_SetOnePixel(3, 23, Enable);
 415   4           LCD_SetOnePixel(1, 23, Disable);
 416   4           LCD_SetOnePixel(0, 23, Disable);  
C51 COMPILER V9.60.0.0   ADC_USER                                                          10/31/2022 08:45:42 PAGE 8   

 417   4         }
 418   3         else if(Pecent20Flag==1&&JBE.Bat_Data.Bat_Val>3550)
 419   3         {
 420   4           JBE.Bat_Data.BatPowerPecent=40;
 421   4           LCD_SetOnePixel(0, 22, Enable);
 422   4           LCD_SetOnePixel(2, 23, Disable);
 423   4           LCD_SetOnePixel(3, 23, Enable);
 424   4           LCD_SetOnePixel(1, 23, Disable);
 425   4           LCD_SetOnePixel(0, 23, Disable);
 426   4           Pecent20Flag=0;
 427   4           Pecent0Flag=0; 
 428   4         }
 429   3         else
 430   3         {
 431   4          JBE.Bat_Data.BatPowerPecent=20;
 432   4          LCD_SetOnePixel(0, 22, Disable);
 433   4          LCD_SetOnePixel(2, 23, Disable);
 434   4          LCD_SetOnePixel(3, 23, Enable);
 435   4          LCD_SetOnePixel(1, 23, Disable);
 436   4          LCD_SetOnePixel(0, 23, Disable);   
 437   4         }
 438   3        
 439   3         }
 440   2         else if(JBE.Bat_Data.Bat_Val>3120)
 441   2         {
 442   3         Pecent20Flag=1;
 443   3         if(Pecent0Flag==0)
 444   3         {
 445   4           JBE.Bat_Data.BatPowerPecent=20;
 446   4           LCD_SetOnePixel(0, 22, Disable);
 447   4           LCD_SetOnePixel(2, 23, Disable);
 448   4           LCD_SetOnePixel(3, 23, Enable);
 449   4           LCD_SetOnePixel(1, 23, Disable);
 450   4           LCD_SetOnePixel(0, 23, Disable);
 451   4         }
 452   3         else if(Pecent0Flag==1&&JBE.Bat_Data.Bat_Val>3140)
 453   3         {
 454   4           JBE.Bat_Data.BatPowerPecent=20;
 455   4           LCD_SetOnePixel(0, 22, Disable);
 456   4           LCD_SetOnePixel(2, 23, Disable);
 457   4           LCD_SetOnePixel(3, 23, Enable);
 458   4           LCD_SetOnePixel(1, 23, Disable);
 459   4           LCD_SetOnePixel(0, 23, Disable);
 460   4           Pecent0Flag=0;
 461   4         }
 462   3         else
 463   3         {
 464   4         lowpowertime++; 
 465   4         JBE.Bat_Data.BatPowerPecent=0;
 466   4         LCD_SetOnePixel(0, 22, Disable);
 467   4         LCD_SetOnePixel(2, 23, Disable);
 468   4         //LCD_SetOnePixel(3, 23, Enable);
 469   4         LCD_SetOnePixel(1, 23, Disable);
 470   4         LCD_SetOnePixel(0, 23, Disable);
 471   4         if(lowpowertime==1)
 472   4         {
 473   5          LCD_SetOnePixel(1, 22, Enable);  //ÏÔÊ¾³äµçÍ¼±ê
 474   5          LCD_SetOnePixel(3, 23, Enable);
 475   5         }
 476   4         else if(lowpowertime==2)
 477   4         {
 478   5          LCD_SetOnePixel(1, 22, Disable); 
C51 COMPILER V9.60.0.0   ADC_USER                                                          10/31/2022 08:45:42 PAGE 9   

 479   5          LCD_SetOnePixel(3, 23, Disable);
 480   5          lowpowertime=0; 
 481   5         }
 482   4         }
 483   3         }
 484   2         else 
 485   2         {
 486   3         Pecent0Flag=1;
 487   3         lowpowertime++;
 488   3         JBE.Bat_Data.BatPowerPecent=0;
 489   3         LCD_SetOnePixel(0, 22, Disable);
 490   3         LCD_SetOnePixel(2, 23, Disable);
 491   3         //LCD_SetOnePixel(3, 23, Enable);
 492   3         LCD_SetOnePixel(1, 23, Disable);
 493   3         LCD_SetOnePixel(0, 23, Disable);
 494   3         if(lowpowertime==1)
 495   3         {
 496   4          LCD_SetOnePixel(1, 22, Enable);  //ÏÔÊ¾³äµçÍ¼±ê
 497   4          LCD_SetOnePixel(3, 23, Enable);
 498   4         }
 499   3         else if(lowpowertime==2)
 500   3         {
 501   4          LCD_SetOnePixel(1, 22, Disable); 
 502   4          LCD_SetOnePixel(3, 23, Disable);
 503   4          lowpowertime=0; 
 504   4         }
 505   3          //if(JBE.Bat_Data.Bat_Val<3000)µÍµçÁ¿¹Ø»ú    ºóÃæ²¹³ä
 506   3         }
 507   2        }
 508   1      
 509   1      }
 510           
 511          uint16_t Get_NTC_Temp(void)
 512          {
 513   1      if(JBE.NTC_Data.IsFistGetTemp==True)
 514   1      {
 515   2      JBE.NTC_Data.NTC_Init=JBE.NTC_Data.NTC_Temp;
 516   2      JBE.NTC_Data.IsFistGetTemp=False;
 517   2      }
 518   1      return JBE.NTC_Data.NTC_Temp;
 519   1      }
 520          
 521          uint16_t Get_NTC_Init(void)
 522          {
 523   1      return JBE.NTC_Data.NTC_Init;
 524   1      
 525   1      } 


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3421    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    279      10
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
